import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  
 * This class inherits from SimplePicture and 
 * allows the student to add functionality to the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output; 
  }
  
  private void zeroBlue(){
  
    Pixel [][] noBlue = this.getPixels2D();
    for(Pixel [] row : noBlue)
    for(Pixel individualPixel : row)
      individualPixel.setBlue(0);
  
  }
  
  private void keepOnlyBlue(){
  
    Pixel [][] noBlue = this.getPixels2D();
    for(Pixel [] row : noBlue)
    for(Pixel individualPixel : row) {
        individualPixel.setRed(0);
            individualPixel.setGreen(0);
    }
        
  
  }
  
  private void negate(){
  
    Pixel [][] noBlue = this.getPixels2D();
    for(Pixel [] row : noBlue)
    for(Pixel individualPixel : row) {
        individualPixel.setRed(255 - individualPixel.getRed());
        individualPixel.setGreen(255 - individualPixel.getGreen());
        individualPixel.setBlue(255 - individualPixel.getBlue());
    }
        
  
  }
  
  private void greyscale(){
  
    Pixel [][] noBlue = this.getPixels2D();
    int average = 0;
    for(Pixel [] row : noBlue)
    for(Pixel individualPixel : row) {
        average = (individualPixel.getRed() + individualPixel.getGreen() + individualPixel.getBlue())/3;
        individualPixel.setRed(average);
        individualPixel.setGreen(average);
        individualPixel.setBlue(average);
    }
        
  
  }
  
  private void mirrorHorizontal(){
  
    Pixel [][] pixels = this.getPixels2D();
    
    Pixel topPixel = null;
    
    Pixel bottomPixel = null;
    
    int height = pixels.length;
    
    for(int row = 0; row < height/2; row++){
    
      for(int col = 0; col < pixels[0].length; col++){
      
        topPixel = pixels[row][col];
        
        bottomPixel = pixels[height - 1 - row][col];
        
        topPixel.setColor(bottomPixel.getColor());
      
      }
    
    }
  
  }
  
  private void mirrorDiagonal(){
  
    Pixel [][] pixels = this.getPixels2D();
    
    Pixel topPixel = null;
    
    Pixel bottomPixel = null;
    
    int height = pixels.length;
    
    for(int row = 0; row < height/2; row++){
    
      for(int col = 0; col < pixels[0].length; col++){
      
        topPixel = pixels[row][col];
        
        bottomPixel = pixels[height - 1 - row][col];
        
        topPixel.setColor(bottomPixel.getColor());
      
      }
    
    }
  
  }
  
  private void checker(){
  
    Pixel [][] pixels = this.getPixels2D();
    
    Pixel pixel = null;
    
    for(int row = 0; row < pixels.length; row++){
    
      for(int col = 0; col < pixels[row].length; col++){
      
        if(row % 2 == 0 && col % 2 == 0){
          
          pixel = pixels[row][col];
        
          pixel.setRed(0);
          pixel.setGreen(0);
          pixel.setBlue(0);
        
        }
      
      }
    
    }
  
  }
  
  private void halfBlack(){
  
    Pixel [][] pixels = this.getPixels2D();
    
    Pixel pixel = null;
    
    for(int row = 0; row < pixels.length; row++){
    
      for(int col = 0; col < pixels[row].length; col++){
        
        pixel = pixels[row][col];
      
        if(col < (pixels[row].length)/2){
          
          pixel.setRed(0);
          pixel.setGreen(0);
          pixel.setBlue(0);
          
        }
      
      }
    
    }
  
  }
  
  /* Main method for testing - each class in Java can have a main method 
   */
  public static void main(String[] args) {
    
    Picture beach = new Picture("beach.jpg");
    //beach.mirrorHorizontal();
    beach.mirrorDiagonal();
    beach.explore();
    Picture arch = new Picture("arch.jpg");
    arch.mirrorDiagonal();
    arch.explore();
    DigitalPicture p = new Picture();
    /*DigitalPicture photo = new Picture();
    SimplePicture photo2 = new Picture("beach.jpg");
    Picture photo3 = new SimplePicture(); 
    DigitalPicture photo4 = new SimplePicture();*/
    
  }
  
} // this } is the end of class Picture, put all new methods before this
